@{
    var selectList = ViewData["Subtitles"] as SelectList;
}

<select onchange="getSubsFromDb(this.value)" class="form-control mt-3 mb-3" asp-items="selectList" id="movie-tracks">
    <option value="">Zgjedh titrat</option>
</select>
<div id="subtitle-container">
    <div id="subtitle-area">
    </div>
</div>
<input id="texttrack-name" class="form-control" placeholder="Emri i titrave"/>
<div class="mt-3">
    <button class="btn btn-success" onclick="encodeSubtitles()">Save Changes</button>
</div>
<script asp-append-version="true" src="~/js/subtitles.js"></script>
<script>
    var accessToken = "0bdb22134b168497f1f3ba85fe2beab5";
    var subtitles = "";
    var timeStamps = "";
    function getSubsFromDb(textTrackId) {
        fetch(`/Home/GetVideoSubsFromDb?textTrackId=${textTrackId}`)
        .then(response => response.text())
        .then((response) => {
            console.log(response);
           subtitles = extractSubtitles(response);
           timeStamps = convertSecondsToTimeFormat(extractTimestamps(response));
           var isComplete = showCorrectSubs();
           if(!isComplete) {
               console.log("No subs available for this");
           }
        })
        .catch((err) => {
            console.log(err);
        })
    }

    function extractSubtitles(subtitleString) {
        // Remove "WEBVTT"
        let cleanedString = subtitleString.replace(/WEBVTT/g, '');

        // Use a regular expression to split by timestamps
        let lines = cleanedString.split(/\d{2}:\d{2}:\d{2}\.\d{3} --> \d{2}:\d{2}:\d{2}\.\d{3}/)
            .map(line => line.replace(/^\d+/, '').replace(/\d+$/, '').trim())  // Remove leading/trailing numbers and trim whitespace
            .filter(line => line.length > 0);  // Filter out empty strings


        return lines;
    }

    function extractTimestamps(subtitleString) {
        // Regular expression to match timestamps
        const timestampRegex = /\d{2}:\d{2}:\d{2}\.\d{3}/g;

        // Extract timestamps
        const timestamps = subtitleString.match(timestampRegex);

        if (!timestamps) return [];

        // Convert timestamps to seconds
        const timestampsInSeconds = timestamps.map(timestamp => {
            const [hours, minutes, seconds] = timestamp.split(':');
            const [secs, millis] = seconds.split('.');
            return parseInt(hours) * 3600 + parseInt(minutes) * 60 + parseInt(secs) + parseInt(millis) / 1000;
        });

        return timestampsInSeconds;
    }

    function convertSecondsToTimeFormat(secondsArray) {
        return secondsArray.map(seconds => {
            // Calculate hours, minutes, and seconds
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);

            // Format as hh:mm:ss with leading zeros
            return [
                hours.toString().padStart(2, '0'),
                minutes.toString().padStart(2, '0'),
                secs.toString().padStart(2, '0')
            ].join(':');
        });
    }

    function showCorrectSubs() {
        var subtitleContainer = document.getElementById("subtitle-area");
        var deleteButton = document.getElementById("remove-button");
        if (deleteButton) {
            deleteButton.remove();
        }
        subtitleContainer.innerHTML = '';
        if(subtitles.length <= 0) {
            return false;
        }
        subtitles.forEach((s, i) => {
            const subtitleDiv = document.createElement("div");
            subtitleDiv.className = "mt-3 subtitle-editor";
            const textArea = document.createElement('textarea');
            textArea.className = "subtitle-text";
            textArea.setAttribute("rows", "3");
            textArea.setAttribute("cols", "49");
            textArea.innerText = s;
            const timeInputs = document.createElement("div");
            timeInputs.className = "time-inputs";
            const firstInput = document.createElement("input");
            firstInput.value = timeStamps[2 * i];
            firstInput.setAttribute("placeholder", "00:00:00");
            firstInput.className = "first-input";
            const secondInput = document.createElement("input");
            secondInput.value = timeStamps[(2 * i) + 1];
            secondInput.setAttribute("placeholder", "00:00:05")
            secondInput.className = "second-input";

            firstInput.onchange = function (event) {
                validateTime(event);
            };

            secondInput.onchange = function (event) {
                validateTime(event);
            }

            timeInputs.appendChild(firstInput);
            timeInputs.appendChild(secondInput);

            subtitleDiv.appendChild(textArea);
            subtitleDiv.appendChild(timeInputs);
            subtitleContainer.appendChild(subtitleDiv);
        });

        var editorDivs = document.getElementsByClassName("subtitle-editor");
        var lastDiv = Array.from(editorDivs).at(-1);
        var newButton = document.createElement('button');
        newButton.id = 'add-section';
        newButton.onclick = addSubtitleSection;
        newButton.innerText = "Shto";
        newButton.className = "btn btn-primary";
        lastDiv.appendChild(newButton);
        var subtitleContainer = document.getElementById("subtitle-container");
        if (!deleteButton) {
            var newButton = document.createElement("button");
            newButton.innerText = "Fshij";
            newButton.id = "remove-button";
            newButton.className = "mt-3 btn btn-danger";
            newButton.onclick = function (event) {
                removeLast();
            }
            subtitleContainer.appendChild(newButton);
        }
        return true;
    }

    function encodeSubtitles() {
        var subtitles = 'WEBVTT\n\n';

        var subtitleTexts = document.getElementsByClassName('subtitle-text');
        var subtitleInputDivs = document.getElementsByClassName('time-inputs');
        [...subtitleTexts].forEach((e, i) => {
            subtitles += `${i + 1}\n`;
            subtitles += `${subtitleInputDivs[i].children[0].value}.000 --> ${subtitleInputDivs[i].children[1].value}.000 \n`;
            subtitles += `${e.value}\n\n`;
        })
        var encodedSubtitles = encodeURIComponent(subtitles);

        var select = document.getElementById('movie-tracks');

        var firstInputs = document.getElementsByClassName("first-input");
        var secondInputs = document.getElementsByClassName("second-input");

        var errorCount = [];

        [...firstInputs].forEach((e, i) => {
            if (timeToSeconds(e.value) > timeToSeconds(secondInputs[i].value)) {
                // var p = document.createElement("p");
                // p.innerText = "Vlera duhet të jetë më e madhe!";
                // secondInputs[i].parentElement.appendChild(p);
                alert("Koha me a lartë!!");
                errorCount.push("1");
                return;
            }
        })

        if(errorCount.length <= 0)
        fetch(`/Home/EditSubs?trackId=${select.value}&content=${subtitles}`)
        .then(response => response.json())
        .then((response) => {
            if(response.isSaved) {
                editInVimeo(select.value, response.trackURI, subtitles);
            }
        })

    }

    const validateTime = (event) => {
        const timePattern = /^([01]\d|2[0-3]):([0-5]\d):([0-5]\d)$/;
        if (!timePattern.test(event.target.value)) {
            event.target.value = "00:00:00";
        }
    };

    function editInVimeo(trackId, trackUri, subtitles) {
        var texttrackName = document.getElementById('texttrack-name').value;
        const link = `https://api.vimeo.com${trackUri}/${trackId}`;
        console.log(link);
        fetch(link, {
            method: "PATCH",
            headers: {
                "Authorization": `bearer ${accessToken}`,
                "Content-Type": "text/vtt"
            },
            body: JSON.stringify({
                language: "en",
                active: true,
                name: texttrackName,
                type: "subtitles",
                text: subtitles,
            })
        }).then(response => response.json())
        .then((response) => {
                fetch(response.link, {
                    method: "PUT",
                    headers: {
                        'Content-Type': 'text/vtt',
                        'Accept': 'application/vnd.vimeo.*+json;version=3.4'
                    },
                    body: subtitles
                }).then((response) => {
                    console.log(response);
                })
                    .catch((err) => {
                        console.log("err", err);
                    })
            console.log("After edit", response);
        })
    }


</script>