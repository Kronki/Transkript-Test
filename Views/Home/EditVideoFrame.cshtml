@model List<Transcript>

<head>
    <style>
        /* Right-side subtitles */
        #subtitleContainer {
            position: relative;
            width: 789px;
            height: 444px;
        }

        .subtitles {
            border: 1px solid gray;
            border-radius: 12px;
            background-color: #212121;
            width: 50%;
        }

        .subtitleList {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 16px;
        }

            .subtitleList:hover {
                cursor: pointer;
                background-color: #383838;
                font-weight: 600;
            }

            .subtitleList.active {
                background-color: #383838; /* Highlight color for the active subtitle */
                color: white; /* Optional: change text color for better contrast */
                font-weight:600;
            }

        .subtitleText {
            color: #ffb735;
        }

        .subtitleTextContainer {
            background-color: #273850;
            height: 20px;
            width: 60px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 5px;
        }

        .subtitleHeader {
            display:flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px;
        }

        .subtitleContent {
            height: 400px;
            overflow-y: scroll;
            padding-bottom: 16px;
        }

            /* Custom scrollbar styles */
            .subtitleContent::-webkit-scrollbar {
                width: 10px;
            }

            .subtitleContent::-webkit-scrollbar-thumb {
                background-color: #e6a530;
                border-radius: 12px;
            }

                .subtitleContent::-webkit-scrollbar-thumb:hover {
                    background-color: #ffbe49;
                }

            .subtitleContent::-webkit-scrollbar-track {
                background-color: #212121;
                border-radius: 0px 0px 12px 0px;
            }

        /* Bottom subtitles */
        #subtitleDisplay {
            position: absolute;
            bottom: 20px;
            width: 90%;
            text-align: center;
            font-size: 20px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px;
            box-sizing: border-box;
        }

        .editMenu {
            width: 40px;
            height: 40px;
            display:flex;
            justify-content: center;
            align-items: center;
            position: relative;
            border-radius: 50%;
        }

        .editMenu:hover {
            cursor: pointer;
        }

        #editMenuContent {
            position: absolute;
            top: 13%;
            right: 4%;
            z-index: 10;
            background-color: #212121;
            padding: 15px 0;
            border-radius: 4px;
            box-shadow: 0px 0px 20px 5px #646464;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .editMenu:active {
            background-color: #646464;
        }

        .editMenuItem {
            color: white;
            padding: 5px 25px;
            margin: 0;
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .editMenuItem:hover {
            background-color: #383838;
            cursor: pointer;
        }

        .customModal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        .customModal-content {
            background-color: #fefefe;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 50%; /* Could be more or less, depending on screen size */
        }

        .customModal-close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .customModal-close:hover,
            .customModal-close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }
    </style>
    <script src="https://player.vimeo.com/api/player.js"></script>
</head>

<body>
    <div class="w-100" id="subtitleContainer">
        <div class="d-flex gap-3 align-items-center">
            <iframe src="https://player.vimeo.com/video/990565046?title=0&amp;byline=0&amp;portrait=0&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="789" height="444" frameborder="0" allow="autoplay; fullscreen; picture-in-picture; clipboard-write" title="Test"></iframe>
            <div class="subtitles">
                <div class="subtitleHeader">
                    <h3 class="text-white">Transcript</h3>
                    <div onclick="toggleVisibility()" class="editMenu">
                        <svg height="30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 512">
                            <path fill="white" d="M64 360a56 56 0 1 0 0 112 56 56 0 1 0 0-112zm0-160a56 56 0 1 0 0 112 56 56 0 1 0 0-112zM120 96A56 56 0 1 0 8 96a56 56 0 1 0 112 0z" />
                        </svg>
                    </div>
                    <div id="editMenuContent" class="d-none">
                        <p onclick="toggleTimeStamps(this)" class="editMenuItem">
                            <svg width="20px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                <path fill="white" d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" />
                            </svg>
                            <span>Toggle timestamps</span>
                        </p>
                        <p onclick="showEdit()" class="editMenuItem text-center">Edit transcript</p>
                    </div>
                </div>
                <div class="subtitleContent">
                    @foreach (var item in Model)
                    {
                        <div onclick="goToTime(@item.StartTime, event, @item.Id)" class="subtitleList">
                            <div class="subtitleTextContainer">
                                <span class="subtitleText fw-bold">
                                    @{
                                        TimeSpan timeSpan = TimeSpan.FromSeconds(item.StartTime);
                                        string formattedTime;

                                        if (timeSpan.Hours > 0)
                                        {
                                            formattedTime = string.Format("{0:D1}:{1:D2}:{2:D2}", timeSpan.Hours, timeSpan.Minutes, timeSpan.Seconds);
                                        }
                                        else
                                        {
                                            formattedTime = string.Format("{0:D1}:{1:D2}", timeSpan.Minutes, timeSpan.Seconds);
                                        }
                                    }
                                    @formattedTime
                                </span>
                            </div>
                            <div class="d-flex justify-content-between flex-grow-1">
                                <span class="text-white">@item.Text</span>
                                <svg class="editTranscript d-none" width="15px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                    <path fill="white" d="M362.7 19.3L314.3 67.7 444.3 197.7l48.4-48.4c25-25 25-65.5 0-90.5L453.3 19.3c-25-25-65.5-25-90.5 0zm-71 71L58.6 323.5c-10.4 10.4-18 23.3-22.2 37.4L1 481.2C-1.5 489.7 .8 498.8 7 505s15.3 8.5 23.7 6.1l120.3-35.4c14.1-4.2 27-11.8 37.4-22.2L421.7 220.3 291.7 90.3z" />
                                </svg>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div id="subtitleDisplay"></div>
    <div class="customModal" id="myCustomModal">
        <div class="customModal-content">
            <span class="customModal-close" onclick="closeModal()">&times;</span>
            <!-- Modal content here -->
            <p>Your modal content here...</p>
        </div>
    </div>
    <script>
        var iframe = document.querySelector('iframe');
        var player = new Vimeo.Player(iframe);
        var subtitles = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        var isManualScroll = false; // Flag to control if scrolling should be manual

        function updateSubtitles(currentTime) {
            // Remove the 'active' class from all subtitle list items
            document.querySelectorAll('.subtitleList').forEach(el => el.classList.remove('active'));

            // Find and update the current subtitle
            const currentSubtitle = subtitles
                .filter(sub => currentTime >= sub.StartTime)
                .reduce((latest, sub) => (sub.EndTime > (latest ? latest.EndTime : 0) ? sub : latest), null);

            if (currentSubtitle && currentTime <= currentSubtitle.EndTime) {
                document.getElementById('subtitleDisplay').innerText = currentSubtitle.Text;

                // Highlight the corresponding subtitle item
                const subtitleItems = document.querySelectorAll('.subtitleList');
                const index = subtitles.indexOf(currentSubtitle);
                if (index !== -1) {
                    const activeItem = subtitleItems[index];
                    activeItem.classList.add('active');

                    // Scroll the subtitle content container if needed
                    if (!isManualScroll) {
                        const container = document.querySelector('.subtitleContent');
                        const containerTop = container.scrollTop;
                        const containerHeight = container.clientHeight;
                        const itemTop = activeItem.offsetTop;
                        const itemHeight = activeItem.clientHeight;
                        const itemBottom = itemTop + itemHeight;

                        // Define the threshold for scrolling
                        const threshold = containerHeight * 0.07; // Adjust this percentage as needed

                        // Only scroll if the item is within the threshold
                        if (itemBottom > containerTop + containerHeight - threshold) {
                            const scrollToPosition = itemTop - containerHeight / 2 + itemHeight / 2;
                            container.scrollTo({
                                top: scrollToPosition,
                                behavior: 'smooth'
                            });
                        }
                    }
                }
            } else {
                document.getElementById('subtitleDisplay').innerText = '';
            }
        }


        function toggleVisibility() {
            var editMenuContent = document.getElementById("editMenuContent");
            editMenuContent.classList.toggle("d-none");
        }

        function toggleTimeStamps(elem) {
            elem.children[0].classList.toggle("d-none")
            var timeStamps = document.getElementsByClassName("subtitleTextContainer");
            [...timeStamps].forEach((e, i) => {
                e.classList.toggle("d-none");
            })
        }

        function showEdit() {
            var editTranscriptSvgs = document.getElementsByClassName("editTranscript");
            [...editTranscriptSvgs].forEach((e, i) => {
                e.classList.toggle("d-none");
            })
        }

        function editTranscript(id) {
            console.log("hello this is the ID: ", id);
        }

        function openModal() {
            document.getElementById("myCustomModal").style.display = "block";
        }

        function closeModal() {
            document.getElementById("myCustomModal").style.display = "none";
        }

        function goToTime(time, event, id) {
            if ((event.target.nodeName === "svg" || event.target.nodeName === "path") && !event.target.classList.contains("d-none")) {
                editTranscript(id);
                openModal();
            }
            isManualScroll = true; // Enable manual scrolling
            player.setCurrentTime(time).then(() => {
                updateSubtitles(time); // Update subtitles and highlight immediately after setting time
            });
            setTimeout(() => {
                isManualScroll = false; // Re-enable automatic scrolling after a short delay
            }, 500); // Adjust the delay as needed
        }

        function handleItemClick(event) {
            isManualScroll = true; // Enable manual scrolling

            const item = event.currentTarget;
            const index = Array.from(item.parentNode.children).indexOf(item);
            const itemTime = subtitles[index].StartTime;

            player.setCurrentTime(itemTime).then(() => {
                updateSubtitles(itemTime); // Update subtitles and highlight immediately after setting time
            });

            // Scroll the item to the middle of the container
            const container = document.querySelector('.subtitleContent');
            const containerHeight = container.clientHeight;
            const itemTop = item.offsetTop;
            const itemHeight = item.clientHeight;

            // Scroll to make the item appear closer to the middle of the container
            const scrollToPosition = itemTop - containerHeight / 2 + itemHeight / 2;
            container.scrollTo({
                top: scrollToPosition,
                behavior: 'smooth'
            });

            setTimeout(() => {
                isManualScroll = false; // Re-enable automatic scrolling after a short delay
            }, 500); // Adjust the delay as needed
        }

        function displaySubtitles() {
            player.on('timeupdate', function (data) {
                const currentTime = data.seconds;
                if (!isManualScroll) {
                    updateSubtitles(currentTime);
                }
            });
        }

        // Add click event listeners to subtitle items
        document.querySelectorAll('.subtitleList').forEach(item => {
            item.addEventListener('click', handleItemClick);
        });

        displaySubtitles();
    </script>
</body>
