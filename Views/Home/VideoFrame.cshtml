@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Subtitle Editor</title>
    <link href="https://vjs.zencdn.net/7.11.4/video-js.css" rel="stylesheet">
    <script src="https://vjs.zencdn.net/7.11.4/video.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/subtitlejs/0.1.1/subtitle.js"></script>
    <style>
        #subtitleContainer {
            position: relative;
            width: 789px;
            height: 444px;
        }

        #subtitleTrack {
            position: absolute;
            bottom: 10px;
            width: 100%;
            color: white;
            background: rgba(0, 0, 0, 0.5);
            text-align: center;
            padding: 5px;
        }
        #transcriptContainer {
            overflow: scroll;
            width: 50%;
            height: 400px;
            border: 1px solid black;
            padding: 10px;
        }
        .timeInput {
            height: 30px;
            width: 80px;
            margin: 10px;
        }

        #addContainer {
            display: flex;
            justify-content: center;
        }
    </style>
    <script src="https://player.vimeo.com/api/player.js"></script>
</head>
<body>
    <div id="subtitleContainer w-100">
        <div class="d-flex gap-3 align-items-center">
            <iframe src="https://player.vimeo.com/video/990565046?title=0&amp;byline=0&amp;portrait=0&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="789" height="444" frameborder="0" allow="autoplay; fullscreen; picture-in-picture; clipboard-write" title="Test"></iframe>
            <div>
                <button class="btn btn-primary">Edito</button>
            </div>
            <div id="transcriptContainer">
                <div class="textContainer d-flex gap-2 align-items-center">
                    <div>
                        <input onchange="validateTime(event); validateSameDivInput(event)" class="timeInput" placeholder="00:00:00" value="00:00:00" />
                        <input onchange="validateTime(event); validateSameDivInput(event)" class="timeInput" placeholder="00:00:00" value="00:00:00"/>
                    </div>
                    <textarea cols="40" rows="3"></textarea>
                </div>
                <div id="addContainer">
                    <button onclick="addTranscript()" class="mt-2 btn btn-primary w-50 center">Shto</button>
                </div>
            </div>
        </div>
        <div class="d-flex gap-3">
            <button class="btn btn-primary" onclick="setLower()">Lower</button>
            <button class="btn btn-primary" onclick="setHigher()">Higher</button>
        </div>

        <div class="mt-3 d-flex gap-2" id="inputs">
            <input />
            <input />
            <input />
            <input />
            <input />
        </div>
        <div>
            <button onclick="getVimeoURI()">First Step</button>
        </div>
        <div id="subtitle-area">
            <div class="mt-3 subtitle-editor">
                <textarea class="subtitle-text" rows="3" cols="49"></textarea>
                <div class="time-inputs">
                    <input onchange="validateTime(event)" value="00:00:01" placeholder="00:00:01" />
                    <input onchange="validateTime(event)" value="00:00:05" placeholder="00:00:05" />
                </div>
                <button id="add-section" onclick="addSubtitleSection()">Shto</button>
            </div>
        </div>
        <div class="mt-2">
            <button onclick="removeLast()">Fshij</button>
        </div>

        <button class="mt-3" id="save-button">Save Subtitles</button>
        <button class="mt-3" onclick="activateSubtitles()">Activate Subtitles</button>
        <button class="mt-3" onclick="getURITracks()">Get Track URI</button>
    </div>
    @section scripts {
        <script>

            function addTranscript() {
                var lastDiv = Array.from(document.getElementsByClassName("textContainer")).at(-1);
                var newDiv = document.createElement("div");
                var hr = document.createElement("hr");
                newDiv.className = "textContainer d-flex gap-2 align-items-center";
                newDiv.innerHTML = `
                                                       <div>
                                    <input onchange="validateTime(event); validateSameDivInput(event)" class="timeInput" placeholder="00:00:00" value="00:00:00"/>
                                    <input onchange="validateTime(event); validateSameDivInput(event)" class="timeInput" placeholder="00:00:00" value="00:00:00"/>
                                </div>
                                <textarea cols="40" rows="3"></textarea>
                            `;
                lastDiv.parentNode.insertBefore(hr, lastDiv.nextSibling);
                hr.parentNode.insertBefore(newDiv, hr.nextSibling);
            }

            function validateSameDivInput(event) {
                var parent = event.target.parentElement;
                if (timeToSeconds(parent.children[0].value) > timeToSeconds(parent.children[1].value)) {
                    console.log("wrong");
                }
            }

            function validateInputs(event) {

            }



            var accessToken = "0bdb22134b168497f1f3ba85fe2beab5";
            var subtitleUploadLink = "";
            var textTrackURI = "";
            var iframe = document.querySelector('iframe');
            var videoId = getVimeoId(iframe.src);
            var scale = 10;
            var multiplier = 1;
            // getVimeoURI();
            var player = new Vimeo.Player(iframe);
            // player.setVolume(0).then(() => { });

            // player.on('play', function () {
            //     loadSubtitles(videoId);
            //     console.log('Played the video');
            // });

            var newArray = [];
            var afterArray = [];
            var sum = 0;
            var inputs = document.getElementById("inputs");


            //Show the 5 inputs just as youtube has it for the times in subtitles
            player.getDuration().then((duration) => {
                for (let i = 0; i < 5; i++) {
                    var sectionTime = parseFloat(duration / 5);
                    // var before = sectionTime.toString().split(".")[0];
                    var after = sectionTime.toString().split(".")[1];
                    if(after) {
                        sum += parseFloat(after);
                        if (i === 4) {
                            sectionTime += sum / 10;
                            console.log(sectionTime);
                        }
                    }
                    var target = (i + 1) * sectionTime;
                    inputs.children[i].value = formatTime(target);
                    newArray.push(formatTime(target));
                }
                console.log("times", newArray);
                // console.log("after", afterArray);
            })



            //function to adjust the scale of the 5 time inputs
            function setLower() {
                adjustScale(false);
                // scale += 3;
                // newArray = [];
                
                // player.getDuration().then((duration) => {
                //     var viewScale = (duration / scale).toFixed(2);
                //     console.log(viewScale);
                //     if (viewScale > duration)
                //         return;
                //     for (let i = 0; i < 5; i++) {
                //         var sectionTime = parseFloat(viewScale);
                //         // console.log("1", sectionTime);
                //         // var before = sectionTime.toString().split(".")[0];
                //         // var after = sectionTime.toString().split(".")[1];
                //         // console.log("2", after);
                //         // if (after) {
                //         //     sum += parseFloat(after);
                //         //     if (i === 4) {
                //         //         console.log("4", sum);
                //         //         sectionTime += sum / 10;
                //         //         console.log("3", sectionTime);
                //         //     }
                //         // }
                //         var target = (i + 1) * sectionTime;
                //         inputs.children[i].value = formatTime(target);
                //         newArray.push(formatTime(target));
                //     }
                //     console.log("times", newArray);
                //     // console.log("after", afterArray);
                // })
            }



            //function to adjust the scale of the 5 time inputs
            function setHigher() {
                adjustScale(true);
                // scale -= 3;
                // if (scale <= 0)
                //     return;
                // newArray = [];
                // player.getDuration().then((duration) => {
                //     var viewScale = (duration / scale).toFixed(2);
                //     if ((5 * viewScale) > duration) {
                //         scale = 5;
                //         viewScale = duration / scale;
                //     }
                //     for (let i = 0; i < 5; i++) {
                //         var sectionTime = parseFloat(viewScale);
                //         // console.log("1", sectionTime);
                //         // var before = sectionTime.toString().split(".")[0];
                //         // var after = sectionTime.toString().split(".")[1];
                //         // console.log("2", after);
                //         // if (after) {
                //         //     sum += parseFloat(after);
                //         //     if (i === 4) {
                //         //         console.log("4", sum);
                //         //         sectionTime += sum / 10;
                //         //         console.log("3", sectionTime);
                //         //     }
                //         // }
                //         var target = (i + 1) * sectionTime;
                //         inputs.children[i].value = formatTime(target);
                //         newArray.push(formatTime(target));
                //     }
                //     console.log("times", newArray);
                //     // console.log("after", afterArray);
                // })
            }



            //base function for adjusting scale
            function adjustScale(increase) {
                scale += increase ? -3 : 3;
                if (scale <= 0) return;

                newArray = [];

                player.getDuration().then((duration) => {
                    let viewScale = duration / scale;

                    // Ensure we don't go beyond the duration
                    if ((5 * viewScale) > duration) {
                        scale = 5;
                        viewScale = duration / scale;
                    }

                    // Calculate new times for each section
                    for (let i = 0; i < 5; i++) {
                        let target = (i + 1) * viewScale;
                        inputs.children[i].value = formatTime(target);
                        newArray.push(formatTime(target));
                    }

                    console.log("Adjusted times", newArray);
                });
            }

            // player.on('loaded', function () {
            //     var videoId = iframe.src.match(/video\/(\d+)/)[1];
            //     loadSubtitles(videoId);
            // });

            // player.getVideoTitle().then(function (title) { });

            // player.enableTextTrack('en', 'subtitles').then((track) => {
            //     console.log(track);
            // })

            // player.getTextTracks().then((tracks) => {
            //     console.log("tracks", tracks);
            // })

            // function loadSubtitles(subtitleUrl) {
            //     fetch(subtitleUrl)
            //         .then(response => response.text())
            //         .then(text => {
            //             var cues = parseVTT(text);
            //             displaySubtitles(cues);
            //         })
            //         .catch((err) => {
            //             console.log("error", err);
            //         });
            // }


            //function for loading the subtitles of the vimeo video
            function loadSubtitles(videoId) {
                fetch(`https://api.vimeo.com/videos/${videoId}/texttracks`, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        var activeTrack = data.data.filter(track => track.active);
                        var track = activeTrack.find(track => track.language === 'en'); // Adjust the language as needed
                        console.log(track);
                        if (track) {
                            player.enableTextTrack(track.language, 'subtitles').then(function (track) {
                                console.log('Subtitles enabled:', track);
                            }).catch(function (error) {
                                console.error('Error enabling subtitles:', error);
                            });
                        }
                    })
                    .catch(error => console.error('Error fetching subtitles:', error));
            }

            //function to get the id of a video
            function getVimeoId(url) {
                const regex = /vimeo\.com\/video\/(\d+)/;
                const match = url.match(regex);
                return match ? match[1] : null;
            }

            //function to get the details of the video
            function getVimeoURI() {
                fetch(`https://api.vimeo.com/videos/${videoId}`, {
                    method: "GET",
                    headers: {
                        "Authorization": `bearer ${accessToken}`,
                        "Accept": "application/vnd.vimeo.*+json;version=3.4",
                    }
                }).then(response => response.json())
                    .then((response) => {
                        textTrackURI = response.metadata.connections.texttracks.uri;
                        console.log(response);
                        getSubtitleUpload(response.metadata.connections.texttracks.uri);
                    });
            }

            //function to get the upload link for the video
            function getSubtitleUpload(textTrack) {
                fetch(`https://api.vimeo.com${textTrack}`, {
                    method: "POST",
                    headers: {
                        "Authorization": `bearer ${accessToken}`,
                        "Content-Type": "application/json",
                        "Accept": "application/vnd.vimeo.*+json;version=3.4",
                    },
                    body: JSON.stringify({
                        "type": "subtitles",
                        "language": "en",
                        "name": "Titrat e para"
                    })
                }).then(response => response.json())
                    .then((response) => {
                        console.log("1", response.id);
                        subtitleUploadLink = response.link;
                        encodeSubtitles(response.id, response.link);
                    });
            }

            //function to add another section to the subtitle creator
            function addSubtitleSection() {
                var subtitleArea = document.getElementById('subtitle-area');
                var oldButton = document.getElementById('add-section');

                var newDiv = document.createElement('div');
                newDiv.classList.add('mt-3', 'subtitle-editor');

                var newArea = document.createElement('textarea');
                newArea.setAttribute('rows', 3);
                newArea.setAttribute('cols', 49);
                newArea.classList.add('subtitle-text');

                var newTimeInputsDiv = document.createElement('div');
                newTimeInputsDiv.classList.add('time-inputs');

                var timeInputs = document.getElementsByClassName('time-inputs');
                var lastInputs = Array.from(timeInputs).at(-1);
                var firstInput = lastInputs.children[0];
                var lastInput = lastInputs.children[1];

                if (timeToSeconds(firstInput.value) > timeToSeconds(lastInput.value)) {
                    return;
                }
                oldButton.remove();
                var newInputFirst = document.createElement('input');
                newInputFirst.value = lastInput.value ? lastInput.value : firstInput.value;
                newInputFirst.setAttribute('placeholder', lastInput.value ? lastInput.value : firstInput.value);
                var newInputSecond = document.createElement('input');
                newInputSecond.value = lastInput.value ? lastInput.value : firstInput.value;
                newInputSecond.setAttribute('placeholder', lastInput.value ? lastInput.value : firstInput.value);

                newInputFirst.onchange = function (event) {
                    validateTime(event);
                };
                newInputSecond.onchange = function (event) {
                    validateTime(event);
                };

                newTimeInputsDiv.appendChild(newInputFirst);
                newTimeInputsDiv.appendChild(newInputSecond);

                var newButton = document.createElement('button');
                newButton.id = 'add-section';
                newButton.onclick = addSubtitleSection;
                newButton.innerText = "Shto";

                newDiv.appendChild(newArea);
                newDiv.appendChild(newTimeInputsDiv);
                newDiv.appendChild(newButton);

                subtitleArea.appendChild(newDiv);
            }

            //function to remove the last section of the subtitle creator
            const removeLast = () => {
                var subtitles = document.getElementsByClassName('subtitle-editor');
                var lastSubtitle = Array.from(subtitles).at(-1);
                lastSubtitle.remove();

                var newButton = document.createElement('button');
                newButton.id = 'add-section';
                newButton.onclick = addSubtitleSection;
                newButton.innerText = "Shto";

                var lastSubtitle = Array.from(subtitles).at(-1);
                lastSubtitle.appendChild(newButton);
            };

            //function to encode the subtitles when you make a create request
            function encodeSubtitles(id, link) {
                var subtitles = 'WEBVTT\n\n';

                var subtitleTexts = document.getElementsByClassName('subtitle-text');
                var subtitleInputDivs = document.getElementsByClassName('time-inputs');
                [...subtitleTexts].forEach((e, i) => {
                    subtitles += `${i + 1}\n`;
                    subtitles += `${subtitleInputDivs[i].children[0].value}.000 --> ${subtitleInputDivs[i].children[1].value}.000\n`;
                    subtitles += `${e.value}\n\n`;
                })
                var encodedSubtitles = encodeURIComponent(subtitles);

                saveSubtitlesToServer(subtitles, link, id);
            }

            //function to call the vimeoURI method and set in track other functions aswell
            document.getElementById('save-button').addEventListener('click', function () {
                getVimeoURI();
            });

            //function to validate the time ex: 00:30:61 --> 00:00:00
            const validateTime = (event) => {
                const timePattern = /^([01]\d|2[0-3]):([0-5]\d):([0-5]\d)$/;
                if (!timePattern.test(event.target.value)) {
                    event.target.value = "00:00:00";
                }
            };

            //function that accepts a hh:mm:ss time format and returns it in seconds
            const timeToSeconds = (time) => {
                const [hours, minutes, seconds] = time.split(':').map(Number);
                return hours * 3600 + minutes * 60 + seconds;
            };

            //function that saves the subtitles that are created to vimeo for that video
            const saveSubtitlesToServer = (subtitles, link, id) => {
                fetch(link, {
                    method: "PUT",
                    headers: {
                        'Content-Type': 'text/vtt',
                        'Accept': 'application/vnd.vimeo.*+json;version=3.4'
                    },
                    body: subtitles
                }).then((response) => {
                    saveTextTrackToDb(subtitles, link, textTrackURI, id);
                    })
                    .catch((err) => {
                        console.log("err", err);
                    })
            };

            //function to save the subtitles(WEBVTT) to local db as a subtitleRequest
            function saveTextTrackToDb(content, link, uri, id) {
                fetch(`/Home/SaveTextTrackToDb?content=${content}&link=${link}&uri=${uri}&id=${id}`, {
                    method: "POST",
                })
                .then(response => response.json())
                .then((response) => {
                    console.log("Saved to db", response);
                })
            }

            //function to activate the subtitles that were created
            function activateSubtitles() {
                fetch(`https://api.vimeo.com/videos/990565046/texttracks`, {
                    method: "PATCH",
                    headers: {
                        "Authorization": `bearer ${accessToken}`,
                        "Content-Type": "application/json",
                        "Accept": "application/vnd.vimeo.*+json;version=3.4"
                    },
                    body: {
                        "active": true,
                    }
                })
                .then(response => response.json())
                .then((response) => {
                    console.log(response);
                })
                .catch((err) => {
                    console.log("err", err);
                })
            }

            //function to retrieve all textTracks tied to that video
            function getURITracks() {
                fetch(`https://api.vimeo.com/videos/${videoId}/texttracks`, {
                    method: "GET",
                    headers: {
                        "Authorization": `bearer ${accessToken}`,
                        "Accept": "application/vnd.vimeo.*+json;version=3.4",
                    },
                })
                .then(response => response.json())
                .then((response) => {
                    console.log("track got", response);
                    response.data.forEach((e, i) => {
                        console.log(e);
                    })
                })
            }

            //function that accepts the time in seconds and returns it as a hh:mm:ss format
            function formatTime(seconds) {
                const secNum = parseInt(seconds, 10); // Ensure seconds is an integer
                const hours = Math.floor(secNum / 3600);
                const minutes = Math.floor((secNum % 3600) / 60);
                const secs = secNum % 60;

                // Pad with leading zeros
                const formattedHours = hours < 10 ? "0" + hours : hours;
                const formattedMinutes = minutes < 10 ? "0" + minutes : minutes;
                const formattedSeconds = secs < 10 ? "0" + secs : secs;

                return formattedHours + ":" + formattedMinutes + ":" + formattedSeconds;
            }

        </script>
    }
</body>
</html>
