@model Video;
@{

}

@* <div>
    <video id="videoPlayer" width="640" height="360" controls>
        <source src="~/Videos/@Model.FileName" type="video/mp4">
        @* <track label="English" kind="subtitles" srclang="en" src="path/to/your/subtitle.vtt" default>
        <!-- Add more <track> elements for additional subtitle languages if needed -->
        Your browser does not support the video tag.
    </video>
</div> 
*@
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Subtitle Editor</title>
    <link href="https://vjs.zencdn.net/7.11.4/video-js.css" rel="stylesheet">
    <script src="https://vjs.zencdn.net/7.11.4/video.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/subtitlejs/0.1.1/subtitle.js"></script>
</head>
<body>
    <video id="my-video" class="video-js vjs-default-skin" controls preload="auto" width="640" height="264" data-setup="{}">
        <source src="~/Videos/@Model.FileName" type="video/mp4">
        @if(Model.Subtitles != null && Model.Subtitles.Count > 0)
        {
            <track id="subtitle-track" kind="subtitles" src="/Subtitles/@Model.Subtitles[Model.Subtitles.Count - 1].FileName" srclang="en" label="English" default>
        }
    </video>
    <div id="subtitle-area">
        <div class="mt-3 subtitle-editor">
            <textarea class="subtitle-text" rows="3" cols="49"></textarea>
            <div class="time-inputs">
                <input onchange="validateTime(event)" value="00:00:01" placeholder="00:00:01" />
                <input onchange="validateTime(event)" value="00:00:05" placeholder="00:00:05" />
            </div>
            <button id="add-section" onclick="addSubtitleSection()">Shto</button>
        </div>
    </div>
    <div class="mt-2">
        <button onclick="removeLast()">Fshij</button>
    </div>

    <button class="mt-3" id="save-button">Save Subtitles</button>

    <script>
        var player = videojs('my-video');

        const addSubtitleSection = () => {
            var subtitleArea = document.getElementById('subtitle-area');
            var oldButton = document.getElementById('add-section');

            var newDiv = document.createElement('div');
            newDiv.classList.add('mt-3', 'subtitle-editor');

            var newArea = document.createElement('textarea');
            newArea.setAttribute('rows', 3);
            newArea.setAttribute('cols', 49);
            newArea.classList.add('subtitle-text');

            var newTimeInputsDiv = document.createElement('div');
            newTimeInputsDiv.classList.add('time-inputs');

            var timeInputs = document.getElementsByClassName('time-inputs');
            var lastInputs = Array.from(timeInputs).at(-1);
            var firstInput = lastInputs.children[0];
            var lastInput = lastInputs.children[1];

            if(timeToSeconds(firstInput.value) > timeToSeconds(lastInput.value)) {
                return ;
            }
            oldButton.remove();
            var newInputFirst = document.createElement('input');
            newInputFirst.value = lastInput.value ? lastInput.value : firstInput.value;
            newInputFirst.setAttribute('placeholder', lastInput.value ? lastInput.value : firstInput.value);
            var newInputSecond = document.createElement('input');
            newInputSecond.value = lastInput.value ? lastInput.value : firstInput.value;
            newInputSecond.setAttribute('placeholder', lastInput.value ? lastInput.value : firstInput.value);

            newInputFirst.onchange = function (event) {
                validateTime(event);
            };
            newInputSecond.onchange = function (event) {
                validateTime(event);
            };

            newTimeInputsDiv.appendChild(newInputFirst);
            newTimeInputsDiv.appendChild(newInputSecond);

            var newButton = document.createElement('button');
            newButton.id = 'add-section';
            newButton.onclick = addSubtitleSection;
            newButton.innerText = "Shto";

            newDiv.appendChild(newArea);
            newDiv.appendChild(newTimeInputsDiv);
            newDiv.appendChild(newButton);

            subtitleArea.appendChild(newDiv);
        }

        const removeLast = () => {
            var subtitles = document.getElementsByClassName('subtitle-editor');
            var lastSubtitle = Array.from(subtitles).at(-1);
            lastSubtitle.remove();
            
            var newButton = document.createElement('button');
            newButton.id = 'add-section';
            newButton.onclick = addSubtitleSection;
            newButton.innerText = "Shto";

            var lastSubtitle = Array.from(subtitles).at(-1);
            lastSubtitle.appendChild(newButton);
        }

        document.getElementById('save-button').addEventListener('click', function () {
            var subtitles = 'WEBVTT\n\n';

            var subtitleTexts = document.getElementsByClassName('subtitle-text');
            var subtitleInputDivs = document.getElementsByClassName('time-inputs');
            [...subtitleTexts].forEach((e, i) => {
                subtitles += `${i + 1}\n`;
                subtitles += `${subtitleInputDivs[i].children[0].value}.000 --> ${subtitleInputDivs[i].children[1].value}.000\n`;
                subtitles += `${e.value}\n\n`;
            })
            var encodedSubtitles = encodeURIComponent(subtitles);

            saveSubtitlesToServer(encodedSubtitles);
        });

        const validateTime = (event) => {
            const timePattern = /^([01]\d|2[0-3]):([0-5]\d):([0-5]\d)$/;
            if(!timePattern.test(event.target.value)) {
                event.target.value = "00:00:00";
            }
        }

        const timeToSeconds = (time) => {
            const [hours, minutes, seconds] = time.split(':').map(Number);
            return hours * 3600 + minutes * 60 + seconds;
        }

        function saveSubtitlesToServer(vttText) {
            fetch(`/Home/AddSub?text=${vttText}&videoId=${@Model.Id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
            }).then(response => {
                if (response.ok) {
                    alert('Subtitles saved successfully!');
                } else {
                    alert('Failed to save subtitles.');
                }
            });
        }
    </script>
</body>
</html>
